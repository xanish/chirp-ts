// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ------------------------------------------------------------
// Enums
// ------------------------------------------------------------
enum AttachmentType {
  TWEET
  IMAGE
  VIDEO
}

// ------------------------------------------------------------
// Models
// ------------------------------------------------------------
model User {
  id        String    @id @default(uuid())
  username  String    @unique @db.VarChar(64)
  email     String    @unique @db.VarChar(64)
  firstName String    @db.VarChar(64)
  lastName  String?   @db.VarChar(64)
  city      String?   @db.VarChar(100)
  country   String?   @db.VarChar(64)
  birthDate DateTime? @db.Date

  // users tweets, likes, followers and following
  tweets    Tweet[]
  likes     Like[]
  followers Follow[] @relation("UserFollower")
  following Follow[] @relation("UserFollowing")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tweet {
  id      String  @id @default(uuid())
  content String  @db.VarChar(512)
  isReply Boolean @default(false)

  // parent-child relation between tweet and its replies
  parentId String?
  parent   Tweet?  @relation("TweetReplies", fields: [parentId], references: [id])
  replies  Tweet[] @relation("TweetReplies")

  // tweet owner
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  // tweet attachments
  attachments Attachment[]

  // likes on the tweet
  likes Like[]

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id      String         @id @default(uuid())
  type    AttachmentType
  content String         @db.VarChar(256)

  // tweet for the attachment
  tweetId String?
  tweet   Tweet?  @relation(fields: [tweetId], references: [id])

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id String @id @default(uuid())

  // userId liked the tweetId
  userId  String?
  tweetId String?
  user    User?   @relation(fields: [userId], references: [id])
  tweet   Tweet?  @relation(fields: [tweetId], references: [id])

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow {
  id String @id @default(uuid())

  // followerId follows followingId
  followerId  String?
  followingId String?
  follower    User?   @relation("UserFollower", fields: [followerId], references: [id])
  following   User?   @relation("UserFollowing", fields: [followingId], references: [id])

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
