// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ------------------------------------------------------------
// Enums
// ------------------------------------------------------------
enum AttachmentType {
  IMAGE
  VIDEO
}

enum TweetType {
  TWEET
  REPLY
  RETWEET
  QUOTE
}

// ------------------------------------------------------------
// Models
// ------------------------------------------------------------
model User {
  id         String    @id @default(uuid())
  username   String    @unique @db.VarChar(64)
  email      String    @unique @db.VarChar(64)
  password   String
  firstName  String    @db.VarChar(64)
  lastName   String?   @db.VarChar(64)
  city       String?   @db.VarChar(100)
  country    String?   @db.VarChar(64)
  birthDate  DateTime? @db.Date
  isVerified Boolean   @default(false)

  // users tweets, likes, followers and following
  tweets    Tweet[]
  likes     Like[]
  followers Follow[] @relation("UserFollower")
  following Follow[] @relation("UserFollowing")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tweet {
  id      String  @id @default(uuid())
  content String? @db.VarChar(512)

  // parent-child relation between
  // 1. tweet and its replies
  // 2. tweet and its quoted tweet
  // 3. new tweet which is a retweet
  type      TweetType @default(TWEET)
  relatedId String?
  related   Tweet?    @relation("RelatedTweet", fields: [relatedId], references: [id], onDelete: SetNull)
  replies   Tweet[]   @relation("RelatedTweet")

  // tweet owner
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  // tweet attachments
  attachments Attachment[]

  // likes on the tweet
  likes Like[]

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id      String         @id @default(uuid())
  type    AttachmentType
  content String         @db.VarChar(256)

  // tweet for the attachment
  tweetId String?
  tweet   Tweet?  @relation(fields: [tweetId], references: [id])

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  // userId liked the tweetId
  userId  String
  tweetId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet   Tweet  @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, tweetId])
}

model Follow {
  // followerId follows followingId
  followerId  String
  followingId String
  follower    User   @relation("UserFollower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([followerId, followingId])
}
